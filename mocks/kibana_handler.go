// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/disaster37/kb-handler/v8 (interfaces: KibanaHandler)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	kibana "github.com/disaster37/go-kibana-rest/v8"
	kbapi "github.com/disaster37/go-kibana-rest/v8/kbapi"
	patch "github.com/disaster37/kb-handler/v8/patch"
	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
)

// MockKibanaHandler is a mock of KibanaHandler interface.
type MockKibanaHandler struct {
	ctrl     *gomock.Controller
	recorder *MockKibanaHandlerMockRecorder
}

// MockKibanaHandlerMockRecorder is the mock recorder for MockKibanaHandler.
type MockKibanaHandlerMockRecorder struct {
	mock *MockKibanaHandler
}

// NewMockKibanaHandler creates a new mock instance.
func NewMockKibanaHandler(ctrl *gomock.Controller) *MockKibanaHandler {
	mock := &MockKibanaHandler{ctrl: ctrl}
	mock.recorder = &MockKibanaHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKibanaHandler) EXPECT() *MockKibanaHandlerMockRecorder {
	return m.recorder
}

// Client mocks base method.
func (m *MockKibanaHandler) Client() *kibana.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(*kibana.Client)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockKibanaHandlerMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockKibanaHandler)(nil).Client))
}

// LogstashPipelineDelete mocks base method.
func (m *MockKibanaHandler) LogstashPipelineDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogstashPipelineDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogstashPipelineDelete indicates an expected call of LogstashPipelineDelete.
func (mr *MockKibanaHandlerMockRecorder) LogstashPipelineDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogstashPipelineDelete", reflect.TypeOf((*MockKibanaHandler)(nil).LogstashPipelineDelete), arg0)
}

// LogstashPipelineDiff mocks base method.
func (m *MockKibanaHandler) LogstashPipelineDiff(arg0, arg1, arg2 *kbapi.LogstashPipeline) (*patch.PatchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogstashPipelineDiff", arg0, arg1, arg2)
	ret0, _ := ret[0].(*patch.PatchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogstashPipelineDiff indicates an expected call of LogstashPipelineDiff.
func (mr *MockKibanaHandlerMockRecorder) LogstashPipelineDiff(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogstashPipelineDiff", reflect.TypeOf((*MockKibanaHandler)(nil).LogstashPipelineDiff), arg0, arg1, arg2)
}

// LogstashPipelineGet mocks base method.
func (m *MockKibanaHandler) LogstashPipelineGet(arg0 string) (*kbapi.LogstashPipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogstashPipelineGet", arg0)
	ret0, _ := ret[0].(*kbapi.LogstashPipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogstashPipelineGet indicates an expected call of LogstashPipelineGet.
func (mr *MockKibanaHandlerMockRecorder) LogstashPipelineGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogstashPipelineGet", reflect.TypeOf((*MockKibanaHandler)(nil).LogstashPipelineGet), arg0)
}

// LogstashPipelineUpdate mocks base method.
func (m *MockKibanaHandler) LogstashPipelineUpdate(arg0 *kbapi.LogstashPipeline) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogstashPipelineUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogstashPipelineUpdate indicates an expected call of LogstashPipelineUpdate.
func (mr *MockKibanaHandlerMockRecorder) LogstashPipelineUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogstashPipelineUpdate", reflect.TypeOf((*MockKibanaHandler)(nil).LogstashPipelineUpdate), arg0)
}

// RoleDelete mocks base method.
func (m *MockKibanaHandler) RoleDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RoleDelete indicates an expected call of RoleDelete.
func (mr *MockKibanaHandlerMockRecorder) RoleDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleDelete", reflect.TypeOf((*MockKibanaHandler)(nil).RoleDelete), arg0)
}

// RoleDiff mocks base method.
func (m *MockKibanaHandler) RoleDiff(arg0, arg1, arg2 *kbapi.KibanaRole) (*patch.PatchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleDiff", arg0, arg1, arg2)
	ret0, _ := ret[0].(*patch.PatchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleDiff indicates an expected call of RoleDiff.
func (mr *MockKibanaHandlerMockRecorder) RoleDiff(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleDiff", reflect.TypeOf((*MockKibanaHandler)(nil).RoleDiff), arg0, arg1, arg2)
}

// RoleGet mocks base method.
func (m *MockKibanaHandler) RoleGet(arg0 string) (*kbapi.KibanaRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleGet", arg0)
	ret0, _ := ret[0].(*kbapi.KibanaRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleGet indicates an expected call of RoleGet.
func (mr *MockKibanaHandlerMockRecorder) RoleGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleGet", reflect.TypeOf((*MockKibanaHandler)(nil).RoleGet), arg0)
}

// RoleUpdate mocks base method.
func (m *MockKibanaHandler) RoleUpdate(arg0 *kbapi.KibanaRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RoleUpdate indicates an expected call of RoleUpdate.
func (mr *MockKibanaHandlerMockRecorder) RoleUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleUpdate", reflect.TypeOf((*MockKibanaHandler)(nil).RoleUpdate), arg0)
}

// SetLogger mocks base method.
func (m *MockKibanaHandler) SetLogger(arg0 *logrus.Entry) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogger", arg0)
}

// SetLogger indicates an expected call of SetLogger.
func (mr *MockKibanaHandlerMockRecorder) SetLogger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockKibanaHandler)(nil).SetLogger), arg0)
}

// UserSpaceCopyObject mocks base method.
func (m *MockKibanaHandler) UserSpaceCopyObject(arg0 string, arg1 *kbapi.KibanaSpaceCopySavedObjectParameter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSpaceCopyObject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserSpaceCopyObject indicates an expected call of UserSpaceCopyObject.
func (mr *MockKibanaHandlerMockRecorder) UserSpaceCopyObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSpaceCopyObject", reflect.TypeOf((*MockKibanaHandler)(nil).UserSpaceCopyObject), arg0, arg1)
}

// UserSpaceCreate mocks base method.
func (m *MockKibanaHandler) UserSpaceCreate(arg0 *kbapi.KibanaSpace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSpaceCreate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserSpaceCreate indicates an expected call of UserSpaceCreate.
func (mr *MockKibanaHandlerMockRecorder) UserSpaceCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSpaceCreate", reflect.TypeOf((*MockKibanaHandler)(nil).UserSpaceCreate), arg0)
}

// UserSpaceDelete mocks base method.
func (m *MockKibanaHandler) UserSpaceDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSpaceDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserSpaceDelete indicates an expected call of UserSpaceDelete.
func (mr *MockKibanaHandlerMockRecorder) UserSpaceDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSpaceDelete", reflect.TypeOf((*MockKibanaHandler)(nil).UserSpaceDelete), arg0)
}

// UserSpaceDiff mocks base method.
func (m *MockKibanaHandler) UserSpaceDiff(arg0, arg1, arg2 *kbapi.KibanaSpace) (*patch.PatchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSpaceDiff", arg0, arg1, arg2)
	ret0, _ := ret[0].(*patch.PatchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSpaceDiff indicates an expected call of UserSpaceDiff.
func (mr *MockKibanaHandlerMockRecorder) UserSpaceDiff(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSpaceDiff", reflect.TypeOf((*MockKibanaHandler)(nil).UserSpaceDiff), arg0, arg1, arg2)
}

// UserSpaceGet mocks base method.
func (m *MockKibanaHandler) UserSpaceGet(arg0 string) (*kbapi.KibanaSpace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSpaceGet", arg0)
	ret0, _ := ret[0].(*kbapi.KibanaSpace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSpaceGet indicates an expected call of UserSpaceGet.
func (mr *MockKibanaHandlerMockRecorder) UserSpaceGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSpaceGet", reflect.TypeOf((*MockKibanaHandler)(nil).UserSpaceGet), arg0)
}

// UserSpaceUpdate mocks base method.
func (m *MockKibanaHandler) UserSpaceUpdate(arg0 *kbapi.KibanaSpace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSpaceUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserSpaceUpdate indicates an expected call of UserSpaceUpdate.
func (mr *MockKibanaHandlerMockRecorder) UserSpaceUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSpaceUpdate", reflect.TypeOf((*MockKibanaHandler)(nil).UserSpaceUpdate), arg0)
}
